---
## Build and push GrimoireLab Docker images to DockerHub
##
## For this playbook to work, ensure docker-py is Installed
## pip install docker-py
##
## Run as:
## ansible-playbook ansible_release.yml --extra-vars "release=18.03-04"
## ansible-playbook ansible_release.yml --check --extra-vars "release=18.04-01" --tags "build"
## ansible-playbook ansible_release.yml --check --extra-vars "release=latest" --tags "build"
## ansible-playbook ansible_release.yml --check --extra-vars "release=18.04-01" --tags "push"
##
## Build Python packages and containers, not failing if something goes wrong
## ANSIBLE_STDOUT_CALLBACK=debug ansible-playbook ansible_release.yml --check --extra-vars "release=18.04-01 fail=" --tags "build"
##
## Variables:
##  - release: release id (18.07-11, latest, ...)
##  - fail: fail if errors (default --fail, set as "" if not to fail)

- name: Build grimoirelab/factory
  hosts: localhost
  tags:
    - build
  tasks:
    - include_tasks: ansible_build_tag.yml
      loop:
        - factory

- name: Build GrimoireLab packages
  hosts: localhost
  tags:
    - build
    - build_pkgs
  vars:
    FAIL: "YES"
    fail: "{{ ' ' if (FAIL=='NO') else '--fail' }}"
    local: "False"
    repos_file: ""
    repo: ""
  tasks:
    - name: "Define local vars if local"
      set_fact:
        repos_file: "--reposfile /grimoirelab/docker/repos_local.json"
        repo_vol: "{{ playbook_dir }}/..:/grimoirelab"
      when: local == "True"
    - name: "Create directories for packages and old packages"
      file:
        path: "{{playbook_dir}}/{{item}}"
      with_items:
        - dist
        - dist.old

    - name: "Move old packages from dist to dist.old"
      command: "mv -f {{item}} {{ playbook_dir }}/dist.old"
      with_fileglob:
        "{{playbook_dir}}/dist/*"

    - name: "Build packages using grimoirelab/factory ({{ release }})"
      when: release != 'latest'
      docker_container:
        name: factory
        image: "grimoirelab/factory:{{ release }}"
        volumes:
          - "{{ playbook_dir }}/dist:/dist"
          - "{{ playbook_dir }}/logs:/logs"
          - "{{ playbook_dir }}/../releases/{{ release }}:/release"
          - "{{repo_vol}}"
        command: "--build --install --check {{ fail }} --relfile /release {{repos_file}}"
        detach: False
      register: result

    - debug:
        msg: "Building output:\n{{result.ansible_facts.docker_container.Output}}"
      when: release != 'latest'

    - name: "Build packages using grimoirelab/factory (latest in master)"
      when: release == 'latest'
      docker_container:
        name: factory
        image: "grimoirelab/factory:{{ release }}"
        volumes:
          - "{{ playbook_dir }}/dist:/dist"
          - "{{ playbook_dir }}/logs:/logs"
        command: "--build --install --check {{ fail }}"
        detach: False
      register: result

    - debug:
        msg: "Building output:\n{{result.ansible_facts.docker_container.Output}}"
      when: release == 'latest'


- name: "Build grimoirelab/{installed,full}"
  hosts: localhost
  tags:
    - build
  tasks:
    - include_tasks: ansible_build_tag.yml
      loop:
        - installed
        - full

- name: "Test using grimoirelab/full"
  hosts: localhost
  tags:
    - build
    - test
  vars:
    FAIL: "YES"
  tasks:
    - name: "Test using grimoirelab/full:{{release}}"
      docker_container:
        name: factory
        image: "grimoirelab/full:{{ release }}"
        volumes:
          - "{{ playbook_dir }}/dist:/dist"
          - "{{ playbook_dir }}/logs:/logs"
          - "{{ playbook_dir }}/testconf:/testconf"
          - "{{ playbook_dir }}/../releases/{{ release }}:/release"
        env:
          TEST: "YES"
          FAIL: "{{FAIL}}"
        detach: False
      register: result

    - debug:
        msg: "Testing output:\n{{result.ansible_facts.docker_container.Output}}"
      when: result.ansible_facts is defined

- name: "Build grimoirelab/secured"
  hosts: localhost
  tags:
    - build
  tasks:
    - include_tasks: ansible_build_tag.yml
      loop:
        - secured

- name: "Push packages to pypi"
  hosts: localhost
  tags:
    - push
    - push_pypi
  tasks:
    - command: "twine upload --skip-existing {{item}}"
      with_fileglob:
        "{{playbook_dir}}/dist/*"

- name: "Push to DockerHub"
  hosts: localhost
  tags:
    - push
    - push_docker
  tasks:
    - include_tasks: ansible_push.yml
      loop:
        - factory
        - installed
        - full
        - secured
